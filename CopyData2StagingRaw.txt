///User::v_int64_executionAuditId
///User::v_Loop_AuditBreakpointId
///User::v_DWConnectionString



#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Data.OleDb;
using System.Security.Cryptography;
using System.IO;
using System.Net.NetworkInformation;
#endregion

namespace ST_b39fda6063fb4e909c39b19a5d075a97
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            string strDWConnectionString = "";
            long lExecutionAuditBreakpointId = 0;
            int lExecutionAuditId = 0;
            string ErrorCode = "";

            try
            {
                ErrorCode = "SCR-000";

                strDWConnectionString = (string)Dts.Variables["User::v_DWConnectionString"].Value;

                /* Refactor the ConnectionString to a SqlClientConnection Removing the OLEDB details */
                strDWConnectionString = strDWConnectionString.Replace("Provider=MSOLEDBSQL;", "");

                lExecutionAuditBreakpointId = (long)Dts.Variables["User::v_Loop_AuditBreakpointId"].Value;
                lExecutionAuditId = (int)Dts.Variables["User::v_int64_executionAuditId"].Value;

                string sourceConnectionString = "";
                string destinationConnectionString = "";
                string sourceTableName = "";
                string destinationTableName = "";
                string deltaLoadPredicate = "";
               
                bool isDirectTableTransfer = false;

                ErrorCode = "SCR-001";

              /* Get the Configuration */
              var DtConfig = this.GetConfiguration(strDWConnectionString, lExecutionAuditBreakpointId);
                DataRow row = DtConfig.Rows[0];
                
                /* Get the data from the Confoguration */
                isDirectTableTransfer = (bool)row["isDirectTableTransfer"];
                sourceConnectionString = row["SourceConnectionString"].ToString();
                destinationConnectionString = row["DestinationConnectionString"].ToString();
                sourceTableName = row["SourceTableName"].ToString();
                destinationTableName = row["DestinationTable"].ToString();

                ErrorCode = "SCR-001-A";

                string strSQLtoRun;
                if (isDirectTableTransfer)
                {
                    strSQLtoRun = "SELECT * FROM " + sourceTableName;
                    deltaLoadPredicate = row["DeltaLoadPredicate"].ToString();
                    if (deltaLoadPredicate.Length > 0)
                    {
                        deltaLoadPredicate = deltaLoadPredicate.Replace("@p_PredicateStartDate", row["DataPredicateStartDate"].ToString());
                        deltaLoadPredicate = deltaLoadPredicate.Replace("@p_PredicateEndDate", row["DataPredicateEndDate"].ToString());

                        strSQLtoRun = strSQLtoRun + ' ' + deltaLoadPredicate;
                    }
                } else
                {
                    strSQLtoRun = row["SourceSQL"].ToString();
                }

                ErrorCode = "SCR-002";
                DataTable sourceData = GetSourceData(sourceConnectionString, strSQLtoRun);

                ErrorCode = "SCR-003";
                BulkDirectCopy(sourceData, destinationConnectionString, destinationTableName);

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                AddError(strDWConnectionString, lExecutionAuditId, lExecutionAuditBreakpointId, ErrorCode, ex.Message, "ExtractData-Script");
                throw;
            }
        }

        /* 
            Get the Source Data based on the SQL Statement 
         */
        private DataTable GetSourceData(string strSourceConnection, string SQL)
        {
            using (SqlConnection conn = new SqlConnection(strSourceConnection))
            {
                try
                {
                    using (SqlDataAdapter da = new SqlDataAdapter())
                    {
                        da.SelectCommand = new SqlCommand(SQL, conn);

                        DataSet ds = new DataSet();
                        da.Fill(ds);

                        return ds.Tables[0];
                    }
                }
                catch (SqlException ex)
                {
                   throw new Exception(ex.Message, ex.InnerException);
                }
                catch (Exception e)
                {
                    throw new Exception(e.Message, e.InnerException);
                }
            }
        }

        private void BulkDirectCopy(DataTable dtSourceData, string strDestinationConnectionString, string strDestinationTableName)
        {
            try
            {
                Dts.Variables["User::v_Loop_NumberOfRows"].Value = (long)dtSourceData.Rows.Count;
                using (var copy = new SqlBulkCopy(strDestinationConnectionString))
                {
                    copy.BatchSize = 10000;
                    copy.DestinationTableName = strDestinationTableName;
                    copy.WriteToServer(dtSourceData);
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }


        /* 
            Get the Configuration of the Table Executing to Confogure the process                  
         */
        private DataTable GetConfiguration(string strDWConnectionString, long lAuditBreakpointId)
        {

            using (SqlConnection conn = new SqlConnection(strDWConnectionString))
            {
                try
                {
                    using (SqlDataAdapter da = new SqlDataAdapter())
                    {
                        da.SelectCommand = new SqlCommand("[wpss].[sp_SSIS_GetConfiguration]", conn);
                        da.SelectCommand.Parameters.AddWithValue("@p_ExecutionBreakdownAuditId", lAuditBreakpointId);
                        da.SelectCommand.CommandType = CommandType.StoredProcedure;

                        DataSet ds = new DataSet();
                        da.Fill(ds);

                        return ds.Tables[0];
                    }
                }
                catch (SqlException ex)
                {
                    throw;
                }
                catch (Exception e)
                {
                    throw;
                }
            }
        }

        private bool AddError(string strDWConnectionString, int pAuditId, long pAuditBreakpointId, string pErrorCode, string pErrorDescription, string pProcessName)
        {

            using (SqlConnection conn = new SqlConnection(strDWConnectionString))
            {
                try
                {
                    using (SqlCommand comm = new SqlCommand("[wpss].[sp_SSIS_RaiseError]", conn))
                    {

                        comm.CommandType = CommandType.StoredProcedure;
                        comm.Parameters.AddWithValue("@p_executionAuditId", pAuditId);
                        comm.Parameters.AddWithValue("@p_executionAuditBreakpointId", pAuditBreakpointId);
                        comm.Parameters.AddWithValue("@p_errorCode", pErrorCode);
                        comm.Parameters.AddWithValue("@p_errorDescription", pErrorDescription);
                        comm.Parameters.AddWithValue("@p_processName", pProcessName);

                        comm.Connection.Open();

                        comm.ExecuteNonQuery();

                        return true;
                    }
                }

                catch (SqlException ex)
                {
                    throw;
                }
                catch (Exception e)
                {
                    throw;
                }
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}